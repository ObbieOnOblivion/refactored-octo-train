
""" class for the things that can not be change with a tune in the car"""

class ToyotaSupraInternals:

    Gear1 = 3.55

    def __init__(self):
        self.transmition = 'helical gear drive'
        self.gear1_ratio = 3.55
        self.gear2_ratio = None
        self.gear3_ratio = None
        self.gear4_ratio = None
        self.gear5_ratio = None
        self.gear6_ratio = None
        self.dif_type = 'lsd'
        self.dif_ratio = 3.909
        self.engine_type = ' induction performance 2jz'

    def set_gear_ratio(self, gear, ratio):
        if gear == 1:
            self.gear1_ratio = ratio

        if gear == 2:
            self.gear2_ratio =  ratio

        if gear == 3:
            self.gear3_ratio = ratio

        if gear == 4:
            self.gear4_ratio = ratio

        if gear == 5:
            self.gear5_ratio = ratio

        if gear == 6:
            self.gear6_ratio = ratio


Scotty = ToyotaSupraInternals()

Scotty.set_gear_ratio(1, 3.55)
Scotty.set_gear_ratio(2, 2.09)
Scotty.set_gear_ratio(3, 1.49)
Scotty.set_gear_ratio(4, 1.00)
Scotty.set_gear_ratio(5, .69)
Scotty.set_gear_ratio(6, .58)

# print(Scotty.gear1_ratio)
# print(Scotty.gear2_ratio)

""" i want to make a new class were i use ecu to add feul"""


class ToyotaSupra(ToyotaSupraInternals):


    """would this be more apropriate for a static method"""
    @classmethod
    def weird_shape(cls):
        import time
        import turtle
        turtle.forward(100)
        turtle.right(90)
        turtle.forward(100)
        turtle.right(90)
        turtle.forward(100)
        turtle.right(90)
        turtle.forward(100)
        turtle.right(45)
        turtle.forward(70.7106)
        turtle.right(90)
        turtle.forward(70.7106 * 2)
        turtle.right(90)
        turtle.forward(70.7106 * 2)
        turtle.right(90)
        turtle.forward(70.7106 * 2)
        turtle.right(90)
        turtle.forward(70.7106)
        turtle.back(100)
        turtle.left(90)
        turtle.back(100)
        turtle.left(90)
        turtle.back(100)
        turtle.left(90)
        turtle.back(100)
        turtle.left(45)
        turtle.back(70.7106)
        turtle.left(90)
        turtle.back(70.7106 * 2)
        turtle.left(90)
        turtle.back(70.7106 * 2)
        turtle.left(90)
        turtle.back(70.7106 * 2)
        turtle.left(90)
        turtle.back(70.7106)
        turtle.forward(100)
        turtle.left(90)
        turtle.forward(100)
        turtle.left(90)
        turtle.forward(100)
        turtle.left(90)
        turtle.forward(100)
        turtle.left(45)
        turtle.forward(70.7106)
        turtle.left(90)
        turtle.forward(70.7106 * 2)
        turtle.left(90)
        turtle.forward(70.7106 * 2)
        turtle.left(90)
        turtle.forward(70.7106 * 2)
        turtle.left(90)
        turtle.forward(70.7106)

        turtle.done()

    @classmethod
    def reborn(cls):
        cls.RidoxKit = True

    @staticmethod
    def select_tyre_type():
        tyres = ['Drag Radials', 'Slick', 'Street Nitos']
        print('===' * 12)
        entry1 = input(f'{tyres[0]}:1\n{tyres[1]}:2\n{tyres[2]}:3\nWhat Tyre Do You Want:  ')
        print('===' * 12)
        pass

    def click(self):
        import tkinter as tk
        Mane = tk.Tk()
        Mane.geometry('300x300-170-50')
        Mane.title('spring pressure')

        text1 = tk.Text(Mane, relief= 'sunken')
        text1.delete(0.0, 6.6)
        text1.insert(self.spring_preasure)

        Mane.mainloop()

    @staticmethod
    def what_we_do():
        import tkinter as tk
        mainwindow = tk.Tk()
        mainwindow.geometry('700x300-50-100')

        label1 = tk.Label(mainwindow, text= 'tyres')
        label2 = tk.Label(mainwindow, text= 'boost preasure')
        label3 = tk.Label(mainwindow, text= 'duty cycle')
        label4 = tk.Label(mainwindow, text= 'launch control')
        label5 = tk.Label(mainwindow, text= 'boost by gear')
        label6 = tk.Label(mainwindow, text= 'car details')

        # label1.config(relief= 'sunken')
        # label2.config(relief= 'raised')
        # label3.config(relief= 'sunken')
        # label4.config(relief= 'raised')
        # label5.config(relief= 'sunken')
        # label6.config(relief= 'raised')
        #
        label1.config(relief= 'groove')
        label2.config(relief= 'groove')
        label3.config(relief= 'groove')
        label4.config(relief= 'groove')
        label5.config(relief= 'groove')
        label6.config(relief= 'groove')

        label1.grid(column= 0, row= 0, sticky= 'nesw')
        label2.grid(column= 1, row= 0, sticky= 'nesw')
        label3.grid(column= 2, row= 0, sticky= 'nesw')
        label4.grid(column= 3, row= 0, sticky= 'nesw')
        label5.grid(column= 4, row= 0, sticky= 'nesw')
        label6.grid(column= 5, row= 0, sticky= 'nesw')

        mainwindow.columnconfigure(0, weight=4)
        mainwindow.columnconfigure(1, weight=4)
        mainwindow.columnconfigure(2, weight=4)
        mainwindow.columnconfigure(3, weight=4)
        mainwindow.columnconfigure(4, weight=4)
        mainwindow.columnconfigure(5, weight=4)

        mainwindow.rowconfigure(0, weight=4)

        mainwindow.mainloop()




    def use_screen(self): # maybee add a new window for a login and that login class this class function

        def click16():

            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("engine")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'engine type: \n[{Scotty.engine_type}]')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()



        def click15():
            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("differential")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'differential type [{Scotty.dif_type}]')
            text1.insert(0.0, f'differential ratio [{Scotty.dif_ratio}]\n')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click14():

            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("gear 6 ratio")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'gear 6 ratio is [{Scotty.gear6_ratio}]')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click13():

            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("gear 5 ratio")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'gear 5 ratio is [{Scotty.gear5_ratio}]')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click12():

            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("gear 4 ratio")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'gear 4 ratio is [{Scotty.gear4_ratio}]')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click11():

            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("gear 3 ratio")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'gear 3 ratio is [{Scotty.gear3_ratio}]')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click10():

            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("gear 2 ratio")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'gear 2 ratio is [{Scotty.gear2_ratio}]')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click9():


            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title("gear 1 ratio")

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'gear 1 ratio is [{Scotty.gear1_ratio}]')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text= 'terminate', command= close_click)
            button101.grid(column= 0, row=1)

            Mane.columnconfigure(0, weight= 6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight= 6)


            Mane.mainloop()

        def click8():
            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title('fuel pressure ')

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'{self.feul_preasure} psi')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text= 'terminate', command= close_click)
            button101.grid(column= 0, row=1)

            Mane.columnconfigure(0, weight= 6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight= 6)


            Mane.mainloop()

        def click7():
            import tkinter as tk
            import tkinter as tk
            def close_click():
                Mane.destroy()

            Mane = tk.Tk()
            Mane.geometry('450x500-170-50')
            Mane.title('two-step RPM')
            Mane.configure(background='yellow', relief='groove', borderwidth=4)

            text1 = tk.Text(Mane, width=35)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'two-step rpm set at {self.twosteprpm} rpm\'s')
            text1.insert(0.0, time.strftime("%Y-%b-%d (%A) \nTime: [%H:%M:%S]\n"))
            text1.insert(0.0, "As of : ")
            text1.configure(background='yellow', fg='green', relief='sunken', borderwidth=6)

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            bell1 = tk.Label(Mane, text='increments by\n 100')
            bell1.grid(column=1, row=0)

            Mane.columnconfigure(0, weight=16)
            Mane.columnconfigure(1, weight=16)

            Mane.rowconfigure(0, weight=16)
            Mane.rowconfigure(1, weight=16)
            Mane.rowconfigure(2, weight=16)

            def james():  # help needed here
                # ToyotaSupra.tyre_pressure = entry1
                # print(ToyotaSupra.tyre_pressure)
                if 3500 <= self.twosteprpm <= 4500:
                    self.twosteprpm += 100

                else:
                    self.twosteprpm = 3500

            but1 = tk.Button(Mane, text='apply new two-step RPM', command=james)
            but1.grid(column=1, row=1)

            Mane.mainloop()


        def click6():
            import tkinter as tk

            def close_click():
                Mane.destroy()

            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title('duty cycle')

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)  # maybe dont delete and add
            text1.insert(0.0, f'{self.dutycycle}%')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click5():
            import tkinter as tk
            def close_click():
                Mane.destroy()

            Mane = tk.Tk()
            Mane.geometry('450x500-170-50')
            Mane.title('tyre pressure')
            Mane.configure(background='yellow', relief='groove', borderwidth=4)

            c = tk.PhotoImage(file='/Users/abdurahmanomoruyi/Downloads/1444829005_tumblr_lzf57inObn1qkhqozo1_500.gif')

            bell1 = tk.Label(Mane, image= c )
            bell1.grid(column=0, row=0)

            Mane.columnconfigure(0, weight=16)

            Mane.rowconfigure(0, weight=16)


            def james():  # help needed here
             pass

        def click4():
            import tkinter as tk
            def close_click():
                Mane.destroy()

            Mane = tk.Tk()
            Mane.geometry('450x500-170-50')
            Mane.title('boost pressure')
            Mane.configure(background='yellow', relief='groove', borderwidth=4)

            text1 = tk.Text(Mane, width=35)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'your boost pressures are {self.boost_level} psi')
            text1.insert(0.0, time.strftime("%Y-%b-%d (%A) \nTime: [%H:%M:%S]\n"))
            text1.insert(0.0, "As of : ")
            text1.configure(background='yellow', fg='green', relief='sunken', borderwidth=6)

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            bell1 = tk.Label(Mane, text='increments by\n 1 psi')
            bell1.grid(column=1, row=0)

            Mane.columnconfigure(0, weight=16)
            Mane.columnconfigure(1, weight=16)

            Mane.rowconfigure(0, weight=16)
            Mane.rowconfigure(1, weight=16)
            Mane.rowconfigure(2, weight=16)

            def james():  # help needed here
                # ToyotaSupra.tyre_pressure = entry1
                # print(ToyotaSupra.tyre_pressure)
                if self.spring_preasure <= self.boost_level <= self.maxxboost:
                    self.boost_level += 1

                else:
                    self.boost_level = 10

            but1 = tk.Button(Mane, text='apply new pressure', command=james)
            but1.grid(column=1, row=1)

            Mane.mainloop()

            pass

        def click3(): # add another window to change the max boost setting
            import tkinter as tk
            import time
            def close_click():
                Mane.destroy()

            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title('max boost')

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'your Max boost is {self.maxxboost} psi')
            text1.insert(0.0, time.strftime("%Y-%b-%d (%A) \nTime: [%H:%M:%S]\n"))
            text1.insert(0.0, "As of : ")
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            # c = tk.Checkbutton(Mane, text='Make sure setting is safe ')

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()

        def click2():
            # make sure to enter a count so they know how much psi they have in their tires
            # maybe a text field to tell the count
            import tkinter as tk
            def close_click():
                Mane.destroy()

            Mane = tk.Tk()
            Mane.geometry('450x500-170-50')
            Mane.title('tyre pressure')
            Mane.configure(background='yellow', relief= 'groove', borderwidth= 4)

            text1 = tk.Text(Mane, width= 30)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'your tyre pressures are {ToyotaSupra.tyre_pressure} psi')
            text1.insert(0.0, time.strftime("%Y-%b-%d (%A) \nTime: [%H:%M:%S]\n"))
            text1.insert(0.0, "As of : ")
            text1.configure(background='yellow', fg='green', relief= 'sunken', borderwidth= 6)

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            bell1 = tk.Label(Mane, text= 'increments by\n 1 psi')
            bell1.grid(column=1, row=0)



            Mane.columnconfigure(0, weight=16)
            Mane.columnconfigure(1, weight=16)


            Mane.rowconfigure(0, weight=16)
            Mane.rowconfigure(1, weight=16)
            Mane.rowconfigure(2, weight=16)

            def james():# help needed here
                # ToyotaSupra.tyre_pressure = entry1
                # print(ToyotaSupra.tyre_pressure)
                if 10 <= ToyotaSupra.tyre_pressure <=30:
                    ToyotaSupra.tyre_pressure += 1

                else:
                    ToyotaSupra.tyre_pressure = 10


            but1 = tk.Button(Mane, text='apply new pressure', command= james)
            but1.grid(column=1, row=1)

            Mane.mainloop()


        def click1(): # we could reuse other functions to keep our code DRY and use replacement fields
            import tkinter as tk
            def close_click():
                Mane.destroy()

            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title('tyre type')

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)# maybe dont delete and add
            text1.insert(0.0, f'{self._tyre_type}')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text='terminate', command=close_click)
            button101.grid(column=0, row=1)

            Mane.columnconfigure(0, weight=6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight=6)

            Mane.mainloop()



        def click():
            def close_click():
                Mane.destroy()

            import tkinter as tk
            Mane = tk.Tk()
            Mane.geometry('250x100-170-50')
            Mane.title('spring pressure')

            text1 = tk.Text(Mane)
            text1.delete(0.0, 6.6)
            text1.insert(0.0, f'{self.spring_preasure} pounds of boost')
            text1.configure(background='yellow', fg='green')

            text1.grid(column=0, row=0)

            button101 = tk.Button(Mane, text= 'terminate', command= close_click)
            button101.grid(column= 0, row=1)

            Mane.columnconfigure(0, weight= 6)
            Mane.columnconfigure(1, weight=6)

            Mane.rowconfigure(0, weight= 6)


            Mane.mainloop()
        import tkinter as tk
        mainwindow = tk.Tk()
        mainwindow.title("Toyota Supra Tune")
        mainwindow.geometry('700x300-50-100')
        mainwindow.configure(background= 'black')

        label1 = tk.Label(mainwindow, text= 'tyres')
        label2 = tk.Label(mainwindow, text= 'boost preasure')
        label3 = tk.Label(mainwindow, text= 'duty cycle')
        label4 = tk.Label(mainwindow, text= 'launch control')
        label5 = tk.Label(mainwindow, text= 'boost by gear')
        label6 = tk.Label(mainwindow, text= 'car details')

        label1.config(relief= 'groove', bg= 'purple')
        label2.config(relief= 'groove', bg= 'purple')
        label3.config(relief= 'groove', bg= 'purple')
        label4.config(relief= 'groove', bg= 'purple')
        label5.config(relief= 'groove', bg= 'purple')
        label6.config(relief= 'groove', bg= 'purple')

        label1.grid(column= 0, row= 0, sticky= 'nesw')
        label2.grid(column= 1, row= 0, sticky= 'nesw')
        label3.grid(column= 2, row= 0, sticky= 'nesw')
        label4.grid(column= 3, row= 0, sticky= 'nesw')
        label5.grid(column= 4, row= 0, sticky= 'nesw')
        label6.grid(column= 5, row= 0, sticky= 'nesw')

        button1 = tk.Button(mainwindow, text="tyre pressures", fg= 'purple', command= click2) # add command = for all of these buttons
        button2 = tk.Button(mainwindow, text="tyre type", fg= 'purple', command = click1)
        button3 = tk.Button(mainwindow, text="spring pressure", fg= 'red', command=click)
        button4 = tk.Button(mainwindow, text="boost pressure", fg='red', command=click4)
        button5 = tk.Button(mainwindow, text="max boost psi", fg='red', command=click3)
        button6 = tk.Button(mainwindow, text="duty cycle", fg='yellow', comman=click6)
        button7 = tk.Button(mainwindow, text="two-step RPM", fg='orange', command=click7)
        button8 = tk.Button(mainwindow, text="gear1", fg='turquoise', command=click9)
        button9 = tk.Button(mainwindow, text="gear2", fg='turquoise', command=click10)
        button10 = tk.Button(mainwindow, text="gear3", fg='turquoise', command=click11)
        button11 = tk.Button(mainwindow, text="gear4", fg='turquoise', command=click12)
        button12 = tk.Button(mainwindow, text="gear5", fg='turquoise', command=click13)
        button13 = tk.Button(mainwindow, text="gear6", fg='turquoise', command=click14)
        button14 = tk.Button(mainwindow, text="fuel pressure", fg='green', command=click8)
        button15 = tk.Button(mainwindow, text="differential", fg='green', command=click15)
        button16 = tk.Button(mainwindow, text="Engine", fg='green', command=click16)
        button17 = tk.Button(mainwindow, text='car image',fg='green',command=click5)


        button1.grid(column= 0, row= 1, sticky='news')
        button2.grid(column= 0, row= 2, sticky='news')
        button4.grid(column= 1, row= 1, sticky='news')
        button3.grid(column= 1, row= 2, sticky='news')
        button5.grid(column= 1, row= 3, sticky='news')
        button6.grid(column= 2, row= 1, sticky='news')
        button7.grid(column= 3, row= 1, sticky='news')
        button8.grid(column= 4, row= 1, sticky='news')
        button9.grid(column= 4, row= 2, sticky='news')
        button10.grid(column= 4, row= 3, sticky='news')
        button11.grid(column= 4, row= 4, sticky='news')
        button12.grid(column= 4, row= 5, sticky='news')
        button13.grid(column= 4, row= 6, sticky='news')
        button14.grid(column=5, row=1, sticky='news')
        button15.grid(column=5, row=2, sticky='news')
        button16.grid(column=5, row=3, sticky='news')
        button17.grid(column=5, row=4, sticky='news')

        mainwindow.columnconfigure(0, weight=4)
        mainwindow.columnconfigure(1, weight=4)
        mainwindow.columnconfigure(2, weight=4)
        mainwindow.columnconfigure(3, weight=4)
        mainwindow.columnconfigure(4, weight=4)
        mainwindow.columnconfigure(5, weight=4)

        mainwindow.rowconfigure(0, weight=4)
        mainwindow.rowconfigure(1, weight=4)
        mainwindow.rowconfigure(2, weight=4)
        mainwindow.rowconfigure(3, weight=4)
        mainwindow.rowconfigure(4, weight=4)
        mainwindow.rowconfigure(5, weight=4)
        mainwindow.rowconfigure(6, weight=4)

        mainwindow.mainloop()

    tyre_pressure = 25

    def __init__(self):
        super().__init__()
        # def super(ToyotaSupra, self).super()
        self.spring_preasure = 5
        self.boost_level = self.spring_preasure  # min boost
        self.dutycycle = 96
        self.feul_preasure = 60
        self.timingdegrees = 0
        self.maxxboost = 55
        self.twosteprpm = 3900
        self.buust = {}
        self._tyre_type = 'Drag Radials'# this hides the value(getters and setters) [next line]
        # and shows not to change these values


    # def boost_by_gear(self, boost_level): # not currently using
    #     if boost_level >= self.spring_preasure and boost_level <= self.maxxboost: # i could simplify
    #         self.boost_level = boost_level

    def maxboost(self, set_maxboost):
        if set_maxboost >= self.spring_preasure:
            self.maxxboost = set_maxboost

    def inc_timing(self, degrees_of_timing):
        if degrees_of_timing >= 16:
            print('you don\'t want your valves hitting your pistons ')
        else:
            self.timingdegrees = degrees_of_timing

    def inc_duty_cycle(self, duty):
        if 100 >= duty >= 80:
            self.dutycycle = duty

        else:
            print('duty cycle to low')

    def set_two_step(self, RPM):
        if RPM > 1500:

            if self._tyre_type == "Drag Radials" and RPM >= 4300:
                print('you will spin on a prepped surface and non prepped surfaces')

                ToyotaSupra.weird_shape()

            if self._tyre_type == "Drag Radials" and 4300 > RPM >= 3800:
                print('you will spin on a non prepped surface')
                self.twosteprpm = RPM


            if self._tyre_type == "Slick" and 3800 >= RPM >= 3500 :
                print('you will spin on a prepped surface')

            else:
                if 3100 <= RPM <= 3500:
                    print('two step is moderate for any tyre')
                    self.twosteprpm = RPM

        else:
            print('your RPM is pretty low for a proper launch')
            self.twosteprpm = RPM

    # def set_gear_ratio(self, Gear_Ratio):
    #     """you cant really change the ratios but i want to make a seprate class for that anyways"""
    #     if self._transmission == 'spur gear drive':
    #         print(f'{self.transmission}: this is a normal transmission type\nthe highest ratio is a 6:1\nthe lowest is .77:1')
    #         entry1 = input('Enter: ')
    #         self.ratio = Gear_Ratio
    #
    #     if self._transmission == 'helical gear drive':
    #         print(f'{self.transmission}this is a normal transmission type with a little more torque \nthe highest ratio is a 6:1\nthe lowest is .77:1')
    #         entry1 = input('Enter: ')
    #         self.ratio = Gear_Ratio

    """well you cant change the trans per gear"""
    #
    # def transmission_change(self):
    #     print('you only got two choices\nthe helical gear drive: more torque\nthe pur gear drive: traditional manual')
    #     entry1 = input('Enter Trans Type: ')
    #     if entry1 == 'pur gear drive' or 'helical gear drive':
    #         self._transmission = entry1

OBBIE = ToyotaSupra()

# using tkinter 
ToyotaSupra.use_screen(OBBIE)
